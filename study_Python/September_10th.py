# <변수란?>
# 변수란 '변할 수 있는것'으로 무언가를 담는 '컵'이라고 생각하면 된다.
a = 10 # 10을 a라는 컵(변수)에 담아줘! 라는 의미
print(a)
# 우리가 수학시간에 배운 등호(=)는 프로그래밍에서 (==)로 표시한다

# <변수의 이름>
# 각 컵을 구분하거나 가져올 수 있도록 붙이는 '라벨'이라고 생각하면 된다.
# 이름을 붙이기 위해서는 몇가지 규칙이 있다.
# 1. _혹은 영문자로 시작해야 한다.
# 2. 숫자로 시작할 수 없다.
# 3. 특수문자(+,-,$,^,&)은 사용할 수 없다.
# 4. 변수 이름에 공백이 있으면 안된다.(보통 _로 이어준다)
# 5. 파이썬의 예약어(for,while,if 등)는 사용할 수 없다.

# <변수에 담기는 데이터 형태>
# 변수에는 여러가지 자료가 담길수 있다.
# 자료형이 숫자인 경우에는 정수, 실수, 8진수, 16진수 등이 있고 문자열인 경우에는 1개 이상의 문자가 담길 수 있다.

integer_value = 123 # 정수
float_value = 3.14 # 실수
octal_value = 0o117 # 8진수(숫자0과 알파벳o를 추가)
hex_value = 0x8ff # 16진수(숫자0과 알파벳x를 추가)

print(integer_value)
print(float_value)
print(octal_value)
print(hex_value)

# -------------------------------------------------------------------------------------

# 문자열에서 싱글쿼터(')나 더블쿼터("") 모두 사용이 가능하다.
name = 'Jeong seong-hun'  # name 이라는 컵(변수)에 Jeong seong-hun을 넣어줘
content = "My Contnet"  # content 라는 컵(변수)에 My Contnet를 넣어줘

# 여러줄의 문자열을 변수에 담을때 싱글쿼터(') 또는 더블쿼터("")를 시작지점과 끝지점에 3개씩 사용하면 된다.
multi = '''this is multi line string
this is second line'''
print(multi)

print('name: ' + name)
print('content: ' + content)
print('multi: ' + multi)

# 문자열에 다른 타입의 데이터를 함께 출력할 경우...
# 1. format 함수 사용
# 중괄호 {}를 사용해 문자열 내에 포맷할 값을 지정
age = 28

print('내 이름은 {0} 이고, 나이는 {1} 입니다.'.format(name, age))
# '문자열'.format(값1, 값2, ...)
# 문자열 내부에 {}로 표시된 자리에 format() 안의 값들이 들어간다.
# {0}, {1}은 순서를 의미한다. {0}은 첫번째 값, {2}는 두번째 값

# 2. str함수 사용
# Python의 내장함수이다.
# 정수나 실수를 문자열 형태로 바꿔주는 함수이다.

age = 28

print('내 이름은 ' + name + '이고 나이는 ' + str(age) + '입니다.')  # str(age) -> 정수값 age를 문자열 형태로 바꿔준다

# 3. f-string 사용
age = 28

print(f'내 이름은 {name}이고, 나이는 {age} 입니다.')  # .f-string 사용

#
# 컴퓨터의 가장 기본이 되는 기능은 연산이다.
# 연산은 피 연산자(Operand)들을 연산자(operator)를 통해 계산 하는 것이다.
# 연산자 종류
# +: 더하기, -: 빼기, /: 나누기(소숫점도 반영해서 나온다), //:나누기(소수점을 버린다), %: 나머지 연산, **: 제곱

result = 4 + 3  # 더하기
print(result)

result = 4 - 3  # 빼기
print(result)

result = 7 / 2  # 나누기 : 소숫점도 반영해서 입력
print(result)

result = 7 // 2  # 소숫점 버림
print(result)

result = 7 % 2  # 나머지 연산
print(result)

result = 7 ** 2  # 제곱
print(result)

# -------------------------------------------------------------------------------------

# 주의할점
# 파이썬에서 세미콜론을 쓰지 않지만 쓴다고해서 문제가 되지 않는다.
i=5
print(i);

# 여러 문장을 한줄로 표현하고 싶을경우는 사용하게 된다.
i = 10; print(i); # 하지만 가독성 차원에서 좋지 않음

# 들여쓰기가 굉장히 중요하다.
# 들여쓰기는 스페이스4번과 탭 으로 할수 있다.(혼용하면 안된다.)
# 들여쓰기는 Tab 으로 통일 (shift+Tab)
integer_value = 10
print(integer_value)

# -------------------------------------------------------------------------------------

# 변수 요약
# 1. 변수(variable) 는 무언가를 담는 컵과 같다.
# 2. 여러 변수를 구분하거나 부르기 위한 이름이 있다.
# 3. 변수에는 여러 데이터가 담길 수 있다.

# -------------------------------------------------------------------------------------

# 조건 문(condition statement) 과 반복 문(loop statement)
# 조건 문(condition statement) -> if
# 살다 보면 생각대로 되지 않는 일이 많은데 프로그래밍에서도 이런 만약을 대비하기 위한 if 문이 존재한다.

# if함수는 만약에 어떤 상황(조건)이 일어 났을 경우(true) 특정 내용을 실행 하도록 합니다.
# if condition:           ----------->           if 두부 값 > 500:
#   statement                                       외상으로 사온다

# if 안의 조건을 만족(true)시키지 못할 경우가 있다.
# 이럴 경우는 else 를 활용할 수 있다.

# 두부가 있으면 두부를 사고 두부가 없으면 순두부를 사는 것을 만들어보자!

# 1. 두부가 있다면?
print('두부 가게에 간다.')

tofubox = 1 # tofubox라는 변수(컵)에 1을 대입
if tofubox > 0: # tofubox가 0보다 크면? 아래 내용 출력
    print('두부를 산다')
else: # tofubox가 0보다 큰 경우가 아니라면 아래 내용 출력
    print('순두부를 산다.')

print('집에 온다.')

# 2. 두부가 없다면?
print('두부 가게에 간다.')

tofubox = 0 # tofubox라는 변수(컵)에 0을 대입
if tofubox > 0: # tofubox가 0보다 크면? 아래 내용 출력
    print('두부를 산다')
else: # tofubox가 0보다 큰 경우가 아니라면 아래 내용 출력
    print('순두부를 산다.')

print('집에 온다.')

# -------------------------------------------------------------------------------------

# if 문 2개와 if...else 의 차이는 무엇일까?
# if 문 2개는 각각의 조건이 독립적으로 검사되며, 첫 번째 if문이 참이어도 두 번째 if문은 별개로 실행될 수 있다.
# if...else는 첫 번째 if문의 조건이 참이면 if문 안의 코드를 실행하고 바로 전체 조건문을 빠져나오며, if문의 조건이 거짓일 경우에만 else문 안의 코드가 실행된다.
# 즉, if-else는 상호 배타적인 조건에 따라 하나의 블록만 실행되도록 하지만, if문 2개는 서로 다른 조건들이 각각 검사되어 여러 코드가 실행될 수 있습니다.
# if 문 2개 중 조건이 맞지 않으면 아무 코드도 실행이 되지 않는다.

# -------------------------------------------------------------------------------------

# if 문 여러개 있는 코드 만들어보기

# 콜라, 생수, 오렌지주스, 식혜, 이온음료 중에 하나를 선택해서 음료가 나오게끔 만들어보자
item = '생수'

# if문이 여러개 있으면 한칸식 띄어서 표시(개인취향)
if item == '콜라':  # item이 콜라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')

if item == '생수':  # item이 생수라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')
    # print(item+'가 나왔습니다.')

if item == '오렌지주스':  # item이 오렌지주스라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')
    # print(item+'가 나왔습니다.')

if item == '식혜':  # item이 식혜라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')
    # print(item+'가 나왔습니다.')

if item == '이온음료':  # item이 이온음료라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')
    # print(item+'가 나왔습니다.')

# 만약 콜라, 생수, 오렌지주스, 식혜, 이온음료가 아닌 다른 음료가 나온다면?
item = '블루베리스무디'

if item == '콜라':  # item이 콜라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')

if item == '생수':  # item이 생수라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')
    # print(item+'가 나왔습니다.')

if item == '오렌지주스':  # item이 오렌지주스라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')
    # print(item+'가 나왔습니다.')

if item == '식혜':  # item이 식혜라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')
    # print(item+'가 나왔습니다.')

if item == '이온음료':  # item이 이온음료라면? 아래 내용 출력
    print(f'{item} 가 나왔습니다.')
    # print(item+'가 나왔습니다.')

# item이 블루베리스무디인 경우에는 각각의 if 조건에 만족하는 경우가 없어서 아무 코드도 실행이 되지 않는 모습을 확인할 수 있다.

# -------------------------------------------------------------------------------------

# else는 조건에 부합하느냐 그렇지 않느냐 두가지 경우만 처리 가능합니다.
# 여러 경우를 처리 할 경우는 else if 를 활용 할 수 있습니다.
# else if문 만들기 - 만약 콜라, 생수, 오렌지주스, 식혜, 이온음료가 아닌 다른 음료가 나온다면?

item = '커피'

if item == '콜라': # item이 콜라인지?
    print(f'{item} 가 나왔습니다.')

elif item == '생수': # item이 생수인지?
    print(f'{item} 가 나왔습니다.')

elif item == '오렌지주스': # item이 오렌지주스인지?
    print(f'{item} 가 나왔습니다.')

elif item == '식혜': # item이 식혜인지?
    print(f'{item} 가 나왔습니다.')

elif item == '이온음료': # item이 이온음료인지?
    print(f'{item} 가 나왔습니다.')

else: # item이 콜라, 생수, 오렌지주스, 식혜, 이온음료가 아닌 경우
    print(f'{item} 은(는) 보유하지 않은 음료 입니다.') # 결과는 커피 은(는) 보유하지 않은 음료 입니다. 라고 나옴

# -------------------------------------------------------------------------------------

# if 안의 조건에는 어찌 되었던 true 가 되어야 실행된다.
# 논리연산자 => A, 의미: A가 참일 경우
# 논리연산자 => !A, 의미: A가 참이 아닐 경우
# 논리연산자 => A != "콜라", 의미: A가 "콜라"가 아닐 경우
# 논리연산자 => A=="콜라"&&B==100, A가 "콜라"이고 B가 100인 경우 (AND)
# 논리연산자 => A=="콜라"||B==100, A가 "콜라"이거나 B가 100인 경우 (OR)

# -------------------------------------------------------------------------------------

# 조건 문(condition statement) 요약
# 1. 조건 문 중 if 문은 조건을 만족(true) 하면 실행된다.
# 2. 조건을 만족하지 않는 경우 실행 되는 else 문도 있다.
# 3. elif 를 통해 다른 조건을 제시 할 수도 있다.

# -------------------------------------------------------------------------------------

# 반복문(loop Statement)
# 반복(loop) 문은 단순한 일을 반복 할 때 사용한다.
# 반복(loop)은 "자동화" 를 위해 가장 중요한 조건이다.
# 반복 역시 "특정한 조건"이 만족 되어야 반복 된다.

# for 문은 반복 횟수가 정해진 상태에 적합하다.

# 물 10잔 떠 오기 만들어보자
# for [하나씩가져올변수] in [범위]:

for cup in range(1, 11):
    print(f'물 {cup} 번째 잔 떠왔습니다.')
# for함수는 'cup 을 하나씩 떠오자'라는 신호로 반복을 시작
# range(1,11)은 몇번째 컵인지 1번부터 10번까지 알려주는 범위이다.
# 첫 번째 반복에서는 cup = 1 이 되어 1번 컵에 물을 채운다.
# 두 번째 반복에서는 cup = 2 이 되어 2번 컵에 물을 채운다.
# 이런 식으로 반복하다가 열 번째 반복에서는 cup = 10 이 되어서 10번 컵에 물을 채운다.

print()
# 만약 커피를 타는데 한잔의 물에 믹스 2개씩을 넣어야 한다면?
# 반복안에 반복이 발생된다. -> 이중for문

# 커피 타는것도 추가해서 for문 추가해보자
for cup in range(1, 11):
    print(f'물 {cup} 번째 잔 떠왔습니다.')
    for mix in range(1, 3):
        print(f'{mix} 개의 믹스를 넣는다.')
        for spoon in range(1,4):
            print(f'수푼으로 {spoon} 번 젓는다.')

# -------------------------------------------------------------------------------------

cup = 0

""" 조건이 무조건 참이될 경우 영원히 실행 되므로 멈출수 없다.
while true: <- 영원히 실행
    cup = cup + 1
    print(cup)
"""

while cup<10: # cup이 10보다 작으면 계속 반복
    cup = cup + 1
    print(cup)

# -------------------------------------------------------------------------------------

import random

number = random.randint(1,31) # 1~31 까지의 숫자를 앤덤하게 뽑아서 number에 대입
print(f' 내 마음속 숫자: {number}')
running = True # running 에 True 대입

# while 은 오른쪽에 있는 조건 결과가 True 일 경우 반복되는 구문
# running 이 초기에 True 이므로 무조건 실행되는 구조
while running:
    # 입력받은 값을 정수(int) 로 변환하여 guess 에 대입
    guess = int(input('1~31 중 내가 생각한 숫자는?'))
    print(f'입력받은 숫자 : {guess}')
    if number > guess: # number 가 guess 보다 크다면? 아래 내용 출력
        print('내가 생각한 숫자보다 작습니다.')
    elif number < guess: # number 가 guess 보다 작다면? 아래 내용 출력
        print('내가 생각한 숫자보다 큽니다.')
    else: # # number 와 guess 가 서로 크지도 작지도 않으면? 아래 내용 출력
        print('정답입니다.')
        running = False # runnnig 변수는False 값으로 바뀌게 된다.

# -------------------------------------------------------------------------------------
# https://velog.io/@dankj1991/Python-loop-cond